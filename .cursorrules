
# ========================================
# Reasoning Layer Context (Auto-Generated)
# ========================================

## Context Loading

ALWAYS read .reasoning/current-context.json at the start of every conversation.

This file contains the project's reasoning context:
- Current goals and intent
- Active tasks and pending actions
- Recent decisions and blockers
- Hot spots and suggestions
- Complete reasoning graph with all nodes

## How to Use

At conversation start, automatically load context:

```typescript
import * as fs from 'fs';

const context = JSON.parse(
  fs.readFileSync('.reasoning/current-context.json', 'utf8')
);

// Available data:
console.log('Intent:', context.ai_summary.current_intent);
console.log('Goals:', context.ai_summary.active_goals);
console.log('Actions:', context.ai_summary.pending_actions);
console.log('Suggestions:', context.ai_summary.suggestions);
console.log('Blockers:', context.ai_summary.blockers);
```

## Adapt Responses

Use this context to:
1. Understand what the user is currently working on
2. Provide relevant, context-aware suggestions
3. Avoid asking for information already in the context
4. Proactively suggest next steps based on pending actions
5. Alert about blockers if present

## Example Integration

When user asks "What should I do next?":
- Read current_intent from context
- List pending_actions from ai_summary
- Prioritize based on dependencies
- Suggest the most logical next step

## Context Structure

```typescript
interface CurrentContext {
  timestamp: string;
  workspace: string;
  current_graph: {
    id: string;
    title: string;
    nodes: ReasoningNode[];  // Complete graph
    edges: ReasoningEdge[];
    stats: GraphStats;
  };
  project_state: {
    files_tracked: number;
    graphs_generated: number;
    last_activity: string;
    hot_files: HotFile[];
  };
  ai_summary: {
    current_intent: string;
    active_goals: string[];
    pending_actions: string[];
    recent_decisions: string[];
    blockers: string[];
    suggestions: string[];
  };
}
```

## Benefits

✅ No need to repeatedly ask "what are you working on?"
✅ Full project history and context available
✅ Proactive suggestions based on patterns
✅ Continuity across conversations
✅ Understanding of architectural decisions

## Update Frequency

The context file is updated automatically on every code change.
Always read fresh data at conversation start.

---

*Auto-generated by Reasoning Layer v2.0*
*Do not edit this section - it will be regenerated*
